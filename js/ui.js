 document.addEventListener('DOMContentLoaded',() => {const landingPage =document.getElementById('landing-page');const createRoomPage =document.getElementById('create-room-page');const gameRoomPage =document.getElementById('game-room-page');const createRoomBtn =document.getElementById('create-room-btn');const joinRoomBtn =document.getElementById('join-room-btn');const backToLandingBtn =document.getElementById('back-to-landing');const initializeRoomBtn =document.getElementById('initialize-room-btn');const createRoomForm =document.getElementById('create-room-form');const joinCodePanel =document.getElementById('join-code-panel');const joinCodeDisplay =document.getElementById('join-code');const playerCards =document.getElementById('player-cards');const playerList =document.getElementById('player-list');const timerDisplay =document.getElementById('timer-display');const phaseNameDisplay =document.getElementById('phase-name');const roomNameDisplay =document.getElementById('room-name-display');const roleNameDisplay =document.getElementById('role-name');const roleDescriptionDisplay =document.getElementById('role-description');const actionMessage =document.getElementById('action-message');const eliminateBtn =document.getElementById('eliminate-btn');const investigateBtn =document.getElementById('investigate-btn');const protectBtn =document.getElementById('protect-btn');const chatPanel =document.getElementById('chat-panel');const minimizeChatBtn =document.getElementById('minimize-chat');const chatMessages =document.getElementById('chat-messages');const chatInput =document.getElementById('chat-input');const sendMessageBtn =document.getElementById('send-message-btn');const gameNotification =document.getElementById('game-notification');let currentGameState ={phase:'lobby',selectedPlayerId:null,currentPlayerId:null,currentRole:null,players:[],eliminated:[]};function setupNavigation() {if (createRoomBtn) {createRoomBtn.addEventListener('click',() => {navigateToPage('create-room-page');addEvaTerminalEffect();});} if (backToLandingBtn) {backToLandingBtn.addEventListener('click',() => {navigateToPage('landing-page');addEvaTerminalEffect();});}} function navigateToPage(pageId) {document.querySelectorAll('.eva-page').forEach(page => {page.classList.remove('active');});const targetPage =document.getElementById(pageId);if (targetPage) {targetPage.classList.add('active');if (pageId ==='game-room-page') {initGameUI();}}} function updatePlayerCards(players,eliminated =[]) {if (!playerCards) return;currentGameState.players =players;currentGameState.eliminated =eliminated;playerCards.innerHTML ='';players.forEach(player => {const isEliminated =eliminated.includes(player.id);const card =document.createElement('div');card.className =`player-card ${isEliminated ? 'eliminated' :''}`;card.setAttribute('data-player-id',player.id);card.setAttribute('data-sync',Math.floor(Math.random() * 30) + 70);const header =document.createElement('div');header.className ='card-header';header.textContent =player.name;const avatar =document.createElement('div');avatar.className ='card-avatar';avatar.textContent =isEliminated ? 'X' :'?';const status =document.createElement('div');status.className ='card-status';status.textContent =isEliminated ? 'ELIMINATED' :'ACTIVE';status.setAttribute('data-id',player.id);const reticle =document.createElement('div');reticle.className ='targeting-reticle';card.appendChild(header);card.appendChild(avatar);card.appendChild(status);card.appendChild(reticle);if (!isEliminated) {card.addEventListener('click',() => {selectPlayer(player.id,player.name);});} playerCards.appendChild(card);});} function selectPlayer(playerId,playerName) {currentGameState.selectedPlayerId =playerId;document.querySelectorAll('.player-card').forEach(card => {card.classList.remove('selected');});const selectedCard =document.querySelector(`.player-card[data-player-id="${playerId}"]`);if (selectedCard) {selectedCard.classList.add('selected');} if (actionMessage) {actionMessage.textContent =`${playerName} selected for action.`;} playEvaSound('select');} function updatePlayerList(players,eliminated =[]) {if (!playerList) return;playerList.innerHTML ='';players.forEach(player => {const isEliminated =eliminated.includes(player.id);const playerItem =document.createElement('li');playerItem.className =`player ${isEliminated ? 'eliminated' :'alive'}`;playerItem.textContent =player.name;if (player.isHost) {playerItem.classList.add('host');playerItem.setAttribute('title','Operation Commander');} if (player.id ===currentGameState.currentPlayerId) {playerItem.classList.add('current-user');} playerList.appendChild(playerItem);});} function setupActionButtons() {if (!eliminateBtn || !investigateBtn || !protectBtn) return;eliminateBtn.addEventListener('click',() => {handleActionButtonClick('eliminate');});investigateBtn.addEventListener('click',() => {handleActionButtonClick('investigate');});protectBtn.addEventListener('click',() => {handleActionButtonClick('protect');});} function handleActionButtonClick(actionType) {const selectedPlayerId =currentGameState.selectedPlayerId;if (selectedPlayerId) {const player =currentGameState.players.find(p => p.id ===selectedPlayerId);const playerName =player ? player.name :'Unknown';if (actionMessage) {actionMessage.textContent =`${actionType.charAt(0).toUpperCase() + actionType.slice(1)} action targeted on ${playerName}.`;} showNotification('ACTION CONFIRMED',`${actionType.charAt(0).toUpperCase() + actionType.slice(1)} targeted on ${playerName}.`);if (window.submitGameAction) {window.submitGameAction(actionType,selectedPlayerId);} else {console.log(`${actionType} action on:`,selectedPlayerId);} playEvaSound('action');hideActionButtons();} else {if (actionMessage) {actionMessage.textContent ='Select a player first.';}}} function updateActionButtons(role,phase) {if (!eliminateBtn || !investigateBtn || !protectBtn) return;currentGameState.currentRole =role;eliminateBtn.style.display ='none';investigateBtn.style.display ='none';protectBtn.style.display ='none';if (phase ==='night') {switch (role) {case 'mafia':eliminateBtn.style.display ='block';break;case 'detective':investigateBtn.style.display ='block';break;case 'doctor':protectBtn.style.display ='block';break;}} if (phase ==='day' || phase ==='voting') {if (actionMessage) {actionMessage.textContent ='Select a player to vote for elimination.';}}} function hideActionButtons() {if (eliminateBtn) eliminateBtn.style.display ='none';if (investigateBtn) investigateBtn.style.display ='none';if (protectBtn) protectBtn.style.display ='none';} function setupChat() {if (!minimizeChatBtn || !chatPanel || !sendMessageBtn || !chatInput || !chatMessages) return;minimizeChatBtn.addEventListener('click',() => {chatPanel.classList.toggle('minimized');minimizeChatBtn.textContent =chatPanel.classList.contains('minimized') ? '+' :'_';});sendMessageBtn.addEventListener('click',() => {sendChatMessage();});chatInput.addEventListener('keypress',(e) => {if (e.key ==='Enter') {sendChatMessage();}});addChatMessage('SYSTEM','Welcome to NERV Tactical Operations System.','system');addChatMessage('SYSTEM','Communications channel established.','system');} function sendChatMessage() {const message =chatInput.value.trim();if (message) {if (window.sendChatMessageToServer) {window.sendChatMessageToServer(message);} else {addChatMessage('YOU',message);} chatInput.value ='';}} function addChatMessage(sender,content,type ='') {if (!chatMessages) return;const messageDiv =document.createElement('div');messageDiv.className =`chat-message ${type}`;const time =new Date().toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});messageDiv.innerHTML =` <span class="message-sender">${sender}:</span> <span class="message-content">${content}</span> <span class="message-time">${time}</span> `;chatMessages.appendChild(messageDiv);chatMessages.scrollTop =chatMessages.scrollHeight;playEvaSound('message');} function updateChatMessages(messages) {if (!chatMessages) return;chatMessages.innerHTML ='';messages.forEach(message => {addChatMessage( message.senderName || 'SYSTEM',message.content,message.type || '' );});chatMessages.scrollTop =chatMessages.scrollHeight;} function updateTimer(timeRemaining) {if (!timerDisplay) return;const minutes =Math.floor(timeRemaining / 60);const seconds =timeRemaining % 60;timerDisplay.textContent =`${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;if (timeRemaining < 30) {timerDisplay.style.color ='var(--color-accent-danger)';} else {timerDisplay.style.color ='var(--color-accent-warning)';}} function startTimer(duration,callback) {if (!timerDisplay) return;if (window.timerInterval) {clearInterval(window.timerInterval);} let timeLeft =duration;updateTimer(timeLeft);window.timerInterval =setInterval(() => {timeLeft--;updateTimer(timeLeft);if (timeLeft <=0) {clearInterval(window.timerInterval);if (callback && typeof callback ==='function') {callback();}}},1000);} function showNotification(title,message,duration =3000) {if (!gameNotification) return;const notificationTitle =gameNotification.querySelector('.notification-title');const notificationMessage =gameNotification.querySelector('.notification-message');if (notificationTitle) notificationTitle.textContent =title;if (notificationMessage) notificationMessage.textContent =message;gameNotification.classList.add('active');playEvaSound('notification');setTimeout(() => {gameNotification.classList.remove('active');},duration);} function updateRoleInfo(role) {if (!roleNameDisplay || !roleDescriptionDisplay) return;currentGameState.currentRole =role;roleNameDisplay.textContent =role.toUpperCase();roleDescriptionDisplay.textContent =getRoleDescription(role);} function getRoleDescription(role) {if (window.EvaGame && window.EvaGame.getRoleDescription) {return window.EvaGame.getRoleDescription(role);} switch (role) {case 'mafia':return 'You are a SEELE infiltrator. Eliminate civilians during the night phase. Pretend to be a civilian during the day phase.';case 'civilian':return 'You are a loyal NERV employee. Use your deduction skills to identify SEELE infiltrators during day discussions.';case 'detective':return 'You are a NERV security officer. During the night phase,you can investigate one player to learn if they are SEELE or NERV.';case 'doctor':return 'You are a NERV medical officer. During the night phase,you can protect one player from elimination.';default:return 'Role description not available.';}} function updatePhaseDisplay(phase,round =1) {if (!phaseNameDisplay) return;currentGameState.phase =phase;let phaseName ='';switch (phase) {case 'lobby':phaseName ='LOBBY';break;case 'night':phaseName ='NIGHT CYCLE';break;case 'day':phaseName ='DAY CYCLE';break;case 'voting':phaseName ='VOTING';break;case 'results':phaseName ='RESULTS';break;case 'game_over':phaseName ='GAME OVER';break;default:phaseName =phase.toUpperCase();} if (round > 1 && phase !=='lobby' && phase !=='game_over') {phaseName +=` (ROUND ${round})`;} phaseNameDisplay.textContent =phaseName;} function updateRoomName(roomName) {if (!roomNameDisplay) return;roomNameDisplay.textContent =roomName || 'UNNAMED OPERATION';} function updateGameState(gameState) {if (gameState.phase) {updatePhaseDisplay(gameState.phase,gameState.round);} if (gameState.roomName) {updateRoomName(gameState.roomName);} if (gameState.players) {updatePlayerList(gameState.players,gameState.eliminated || []);updatePlayerCards(gameState.players,gameState.eliminated || []);} if (gameState.currentRole) {updateRoleInfo(gameState.currentRole);} if (gameState.currentRole && gameState.phase) {updateActionButtons(gameState.currentRole,gameState.phase);} if (gameState.timeRemaining) {updateTimer(gameState.timeRemaining);} if (gameState.message) {showNotification( gameState.phase.toUpperCase(),gameState.message );} if (gameState.chat) {updateChatMessages(gameState.chat);} if (gameState.phase ==='game_over' && gameState.winner) {handleGameOver(gameState.winner);}} function handleGameOver(winner) {const message =winner ==='mafia' ? 'The Mafia has taken control of NERV. Civilians lose.' :'All SEELE infiltrators have been identified. Civilians win.';showNotification('GAME OVER',message,10000);const gameOverlay =document.createElement('div');gameOverlay.className ='game-over-overlay';gameOverlay.innerHTML =` <div class="game-over-content"> <h2 class="game-over-title">${winner.toUpperCase()} WINS</h2> <p class="game-over-message">${message}</p> <button class="eva-button primary" id="return-to-hq-btn">RETURN TO HQ</button> </div> `;document.body.appendChild(gameOverlay);document.getElementById('return-to-hq-btn').addEventListener('click',() => {document.body.removeChild(gameOverlay);navigateToPage('landing-page');});} function initGameUI() {setupActionButtons();setupChat();addEvaTerminalEffect();setTimeout(() => {showNotification('SYSTEM ACTIVATED','Welcome to NERV Tactical Operations System.');},1000);} function addEvaTerminalEffect() {const textElements =document.querySelectorAll('.eva-text:not(.typed)');textElements.forEach(element => {element.classList.add('typed');const text =element.textContent;element.textContent ='';element.style.borderRight ='2px solid var(--color-text-primary)';let i =0;const typeInterval =setInterval(() => {if (i < text.length) {element.textContent +=text.charAt(i);i++;} else {clearInterval(typeInterval);element.style.borderRight ='none';}},30);});} function playEvaSound(type) {console.log(`Playing ${type} sound effect`);} function addDataStreams() {const container =document.querySelector('.eva-container');if (!container) return;if (document.querySelector('.data-stream')) return;const dataStream1 =document.createElement('div');dataStream1.className ='data-stream data-stream-1';dataStream1.textContent ='MAGI SYSTEM ONLINE - CASPER:OK - BALTHASAR:OK - MELCHIOR:OK - SYNCHRONIZATION RATE:100% - LCL PRESSURE:NOMINAL';const dataStream2 =document.createElement('div');dataStream2.className ='data-stream data-stream-2';dataStream2.textContent ='01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19:20:21:22:23:24:25:26:27:28:29:30';container.appendChild(dataStream1);container.appendChild(dataStream2);const measurementGrid =document.createElement('div');measurementGrid.className ='measurement-grid';const measurementBar =document.createElement('div');measurementBar.className ='measurement-bar';measurementGrid.appendChild(measurementBar);container.appendChild(measurementGrid);} setupNavigation();addDataStreams();if (gameRoomPage && gameRoomPage.classList.contains('active')) {initGameUI();} window.EvaUI ={navigateToPage,updatePlayerCards,updatePlayerList,updateActionButtons,addChatMessage,updateChatMessages,updateTimer,startTimer,showNotification,updateRoleInfo,updatePhaseDisplay,updateRoomName,updateGameState,selectPlayer};});