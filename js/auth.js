 import {getAuth,GoogleAuthProvider,signInWithPopup,signOut as firebaseSignOut,onAuthStateChanged} from 'firebase/auth';import {app} from './firebase.js';const auth =getAuth(app);const googleProvider =new GoogleAuthProvider();let currentUser =null;document.addEventListener('DOMContentLoaded',() => {setupAuthListeners();setupAuthStateObserver();});function setupAuthListeners() {const signInButtons =document.querySelectorAll('.sign-in-btn');signInButtons.forEach(button => {button.addEventListener('click',signInWithGoogle);});const signOutButtons =document.querySelectorAll('.sign-out-btn');signOutButtons.forEach(button => {button.addEventListener('click',signOut);});} function setupAuthStateObserver() {onAuthStateChanged(auth,(user) => {if (user) {currentUser =user;console.log('User signed in:',user.displayName);updateUserProfile(user);updateAuthUI(true);} else {currentUser =null;console.log('User signed out');updateAuthUI(false);}});} async function signInWithGoogle() {try {googleProvider.setCustomParameters({prompt:'select_account'});const result =await signInWithPopup(auth,googleProvider);const credential =GoogleAuthProvider.credentialFromResult(result);const token =credential.accessToken;const user =result.user;console.log('Google sign-in successful');return {user,token};} catch (error) {handleAuthError(error);throw error;}} async function signOut() {try {await firebaseSignOut(auth);console.log('Sign out successful');} catch (error) {console.error('Error signing out:',error);throw error;}} function updateUserProfile(user) {const userProfile ={uid:user.uid,displayName:user.displayName || 'NERV Agent',email:user.email,photoURL:user.photoURL,lastLogin:new Date()};sessionStorage.setItem('userProfile',JSON.stringify(userProfile));const profileUpdatedEvent =new CustomEvent('userProfileUpdated',{detail:userProfile});document.dispatchEvent(profileUpdatedEvent);} function updateAuthUI(isSignedIn) {const authStatusElements =document.querySelectorAll('.auth-status');authStatusElements.forEach(element => {element.textContent =isSignedIn ? 'AUTHENTICATED' :'GUEST';element.classList.toggle('authenticated',isSignedIn);});const userProfileElements =document.querySelectorAll('.user-profile');userProfileElements.forEach(element => {if (isSignedIn && currentUser) {element.innerHTML =` <div class="profile-name">${currentUser.displayName || 'NERV Agent'}</div> ${currentUser.photoURL ? `<img class="profile-image" src="${currentUser.photoURL}" alt="Profile">` :''} `;element.classList.remove('hidden');} else {element.classList.add('hidden');}});const signInButtons =document.querySelectorAll('.sign-in-btn');const signOutButtons =document.querySelectorAll('.sign-out-btn');signInButtons.forEach(button => {button.style.display =isSignedIn ? 'none' :'block';});signOutButtons.forEach(button => {button.style.display =isSignedIn ? 'block' :'none';});} function handleAuthError(error) {console.error('Authentication error:',error);const errorCode =error.code;const errorMessage =error.message;let userMessage ='Authentication failed. Please try again.';switch (errorCode) {case 'auth/popup-closed-by-user':userMessage ='Sign-in was cancelled. Please try again.';break;case 'auth/popup-blocked':userMessage ='Sign-in popup was blocked. Please enable popups for this site.';break;case 'auth/account-exists-with-different-credential':userMessage ='An account already exists with the same email address but different sign-in credentials.';break;case 'auth/network-request-failed':userMessage ='Network error. Please check your connection and try again.';break;default:userMessage =`Authentication error:${errorMessage}`;} showAuthErrorMessage(userMessage);} function showAuthErrorMessage(message) {let errorElement =document.getElementById('auth-error-message');if (!errorElement) {errorElement =document.createElement('div');errorElement.id ='auth-error-message';errorElement.className ='eva-error-message';const container =document.querySelector('.eva-container');if (container) {container.appendChild(errorElement);} else {document.body.appendChild(errorElement);}} errorElement.textContent =message;errorElement.classList.add('visible');setTimeout(() => {errorElement.classList.remove('visible');},5000);} function getCurrentUser() {return currentUser;} function isAuthenticated() {return currentUser !==null;} function getUserDisplayName() {return currentUser?.displayName || 'NERV Agent';} function getUserId() {return currentUser?.uid || null;} export {signInWithGoogle,signOut,getCurrentUser,isAuthenticated,getUserDisplayName,getUserId};