 document.addEventListener('DOMContentLoaded',() => {console.log('Initializing NERV Tactical Operations System...');initializeApp();});async function initializeApp() {try {const {createRoom,joinRoom,leaveRoom,startGame,listenToRoom,submitAction,sendChatMessage,getCurrentRoomId,setCurrentRoomId} =await import('./firebase.js');window.EvaFirebase ={createRoom,joinRoom,leaveRoom,startGame,listenToRoom,submitAction,sendChatMessage,getCurrentRoomId,setCurrentRoomId};console.log('Firebase module loaded');} catch (error) {console.error('Failed to load Firebase module:',error);} try {const {signInWithGoogle,signOut,getCurrentUser,isAuthenticated,getUserDisplayName,getUserId} =await import('./auth.js');window.EvaAuth ={signInWithGoogle,signOut,getCurrentUser,isAuthenticated,getUserDisplayName,getUserId};console.log('Auth module loaded');} catch (error) {console.error('Failed to load Auth module:',error);} setupNavigationListeners();setupGameActionListeners();setupRoomManagement();addEvaVisualEffects();checkExistingSession();console.log('NERV Tactical Operations System initialized');playSystemSound('startup');} function checkExistingSession() {const roomSession =localStorage.getItem('evaRoomSession');if (roomSession) {try {const session =JSON.parse(roomSession);if (session.roomId && session.joinCode) {console.log('Found existing room session:',session);if (window.EvaFirebase) {window.EvaFirebase.setCurrentRoomId(session.roomId);showRejoinOption(session.roomId,session.joinCode);}}} catch (error) {console.error('Error parsing room session:',error);localStorage.removeItem('evaRoomSession');}}} function showRejoinOption(roomId,joinCode) {const rejoinNotification =document.createElement('div');rejoinNotification.className ='eva-notification rejoin-notification';rejoinNotification.innerHTML =` <div class="notification-content"> <div class="notification-title">ACTIVE OPERATION DETECTED</div> <div class="notification-message">You have an ongoing operation. Would you like to rejoin?</div> <div class="notification-actions"> <button class="eva-button primary" id="rejoin-btn">REJOIN</button> <button class="eva-button secondary" id="abandon-btn">ABANDON</button> </div> </div> `;document.body.appendChild(rejoinNotification);document.getElementById('rejoin-btn').addEventListener('click',() => {rejoinRoom(roomId,joinCode);document.body.removeChild(rejoinNotification);});document.getElementById('abandon-btn').addEventListener('click',() => {localStorage.removeItem('evaRoomSession');document.body.removeChild(rejoinNotification);});} async function rejoinRoom(roomId,joinCode) {try {if (!window.EvaFirebase || !window.EvaAuth) {throw new Error('Firebase or Auth module not loaded');} if (!window.EvaAuth.isAuthenticated()) {await window.EvaAuth.signInWithGoogle();} const result =await window.EvaFirebase.joinRoom(joinCode,window.EvaAuth.getUserDisplayName());navigateToPage('game-room-page');startRoomListener();showNotification('OPERATION REJOINED','You have successfully rejoined the operation.');} catch (error) {console.error('Error rejoining room:',error);showNotification('ERROR','Failed to rejoin operation:' + error.message);localStorage.removeItem('evaRoomSession');}} function setupNavigationListeners() {const createRoomBtn =document.getElementById('create-room-btn');const joinRoomBtn =document.getElementById('join-room-btn');const backToLandingBtn =document.getElementById('back-to-landing');if (createRoomBtn) {createRoomBtn.addEventListener('click',() => {navigateToPage('create-room-page');playSystemSound('transition');});} if (backToLandingBtn) {backToLandingBtn.addEventListener('click',() => {navigateToPage('landing-page');playSystemSound('transition');});} if (joinRoomBtn) {joinRoomBtn.addEventListener('click',async () => {try {if (!window.EvaFirebase || !window.EvaAuth) {throw new Error('Firebase or Auth module not loaded');} if (!window.EvaAuth.isAuthenticated()) {await window.EvaAuth.signInWithGoogle();} const joinCode =prompt('Enter operation access code:');if (joinCode) {const result =await window.EvaFirebase.joinRoom(joinCode,window.EvaAuth.getUserDisplayName());saveRoomSession(result.roomId,joinCode);navigateToPage('game-room-page');startRoomListener();showNotification('OPERATION JOINED','You have successfully joined the operation.');}} catch (error) {console.error('Error joining room:',error);showNotification('ERROR','Failed to join operation:' + error.message);}});}} function navigateToPage(pageId) {document.querySelectorAll('.eva-page').forEach(page => {page.classList.remove('active');});const targetPage =document.getElementById(pageId);if (targetPage) {targetPage.classList.add('active');}} function setupRoomManagement() {const initializeRoomBtn =document.getElementById('initialize-room-btn');if (initializeRoomBtn) {initializeRoomBtn.addEventListener('click',async () => {try {if (!window.EvaFirebase || !window.EvaAuth) {throw new Error('Firebase or Auth module not loaded');} if (!window.EvaAuth.isAuthenticated()) {await window.EvaAuth.signInWithGoogle();} const roomSettings =getRoomSettings();const result =await window.EvaFirebase.createRoom(roomSettings);saveRoomSession(result.roomId,result.joinCode);const joinCodePanel =document.getElementById('join-code-panel');const joinCodeDisplay =document.getElementById('join-code');if (joinCodePanel && joinCodeDisplay) {joinCodeDisplay.textContent =result.joinCode;joinCodePanel.classList.remove('hidden');} addStartGameButton();playSystemSound('success');showNotification('OPERATION CREATED','Room created successfully. Share the code with other agents.');} catch (error) {console.error('Error creating room:',error);showNotification('ERROR','Failed to create operation:' + error.message);}});}} function addStartGameButton() {const joinCodePanel =document.getElementById('join-code-panel');if (joinCodePanel) {if (!document.getElementById('start-game-btn')) {const startGameBtn =document.createElement('button');startGameBtn.id ='start-game-btn';startGameBtn.className ='eva-button primary';startGameBtn.textContent ='START OPERATION';startGameBtn.addEventListener('click',async () => {try {await window.EvaFirebase.startGame();navigateToPage('game-room-page');startRoomListener();showNotification('OPERATION STARTED','The operation has begun. Good luck,agents.');} catch (error) {console.error('Error starting game:',error);showNotification('ERROR','Failed to start operation:' + error.message);}});const panelContent =joinCodePanel.querySelector('.panel-content');if (panelContent) {panelContent.appendChild(startGameBtn);}}}} function startRoomListener() {if (!window.EvaFirebase) {console.error('Firebase module not loaded');return;} window.EvaFirebase.listenToRoom(handleRoomUpdate);} function handleRoomUpdate(roomData) {if (!roomData) {showNotification('OPERATION TERMINATED','The operation has been terminated.');navigateToPage('landing-page');localStorage.removeItem('evaRoomSession');return;} console.log('Room update:',roomData);updateRoomName(roomData.name);updatePlayerList(roomData.players);updateGameState(roomData);if (roomData.chat) {updateChatMessages(roomData.chat);}} function updateRoomName(roomName) {const roomNameDisplay =document.getElementById('room-name-display');if (roomNameDisplay) {roomNameDisplay.textContent =roomName || 'UNNAMED OPERATION';}} function updatePlayerList(players) {const playerListElement =document.getElementById('player-list');if (!playerListElement) return;playerListElement.innerHTML ='';players.forEach(player => {const playerItem =document.createElement('li');playerItem.className ='player alive';playerItem.textContent =player.name;if (player.isHost) {playerItem.classList.add('host');playerItem.setAttribute('title','Operation Commander');} if (window.EvaAuth && player.id ===window.EvaAuth.getUserId()) {playerItem.classList.add('current-user');} playerListElement.appendChild(playerItem);});} function updateGameState(roomData) {const phaseNameDisplay =document.getElementById('phase-name');if (phaseNameDisplay) {let phaseName ='LOBBY';if (roomData.gameState ==='playing') {phaseName =roomData.currentPhase ==='night' ? 'NIGHT CYCLE' :'DAY CYCLE';} else if (roomData.gameState ==='finished') {phaseName ='GAME OVER';} phaseNameDisplay.textContent =phaseName;} if (roomData.gameState ==='playing' && roomData.phaseStartTime && roomData.phaseDuration) {updateTimer(roomData.phaseStartTime,roomData.phaseDuration);} if (roomData.players) {updatePlayerCards(roomData.players,roomData.eliminated || []);} if (roomData.roles && window.EvaAuth) {const currentUserId =window.EvaAuth.getUserId();const currentUserRole =roomData.roles.find(role => role.playerId ===currentUserId);if (currentUserRole) {updateRoleInfo(currentUserRole.role);}} if (roomData.gameState ==='playing' && roomData.currentPhase && roomData.roles && window.EvaAuth) {const currentUserId =window.EvaAuth.getUserId();const currentUserRole =roomData.roles.find(role => role.playerId ===currentUserId);if (currentUserRole) {updateActionButtons(currentUserRole.role,roomData.currentPhase);}}} function updateTimer(phaseStartTime,phaseDuration) {const timerDisplay =document.getElementById('timer-display');if (!timerDisplay) return;if (window.timerInterval) {clearInterval(window.timerInterval);} const startTime =phaseStartTime.toDate ? phaseStartTime.toDate() :new Date(phaseStartTime);const endTime =new Date(startTime.getTime() + (phaseDuration * 1000));const now =new Date();let timeRemaining =Math.max(0,Math.floor((endTime - now) / 1000));updateTimerDisplay(timeRemaining);window.timerInterval =setInterval(() => {timeRemaining--;if (timeRemaining <=0) {clearInterval(window.timerInterval);timeRemaining =0;} updateTimerDisplay(timeRemaining);},1000);} function updateTimerDisplay(timeRemaining) {const timerDisplay =document.getElementById('timer-display');if (!timerDisplay) return;const minutes =Math.floor(timeRemaining / 60);const seconds =timeRemaining % 60;timerDisplay.textContent =`${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`;if (timeRemaining < 30) {timerDisplay.style.color ='var(--color-accent-danger)';} else {timerDisplay.style.color ='var(--color-accent-warning)';}} function updatePlayerCards(players,eliminated) {const playerCardsElement =document.getElementById('player-cards');if (!playerCardsElement) return;playerCardsElement.innerHTML ='';players.forEach(player => {const isEliminated =eliminated.includes(player.id);const card =document.createElement('div');card.className =`player-card ${isEliminated ? 'eliminated' :''}`;card.setAttribute('data-player-id',player.id);card.setAttribute('data-sync',Math.floor(Math.random() * 30) + 70);const header =document.createElement('div');header.className ='card-header';header.textContent =player.name;const avatar =document.createElement('div');avatar.className ='card-avatar';avatar.textContent =isEliminated ? 'X' :'?';const status =document.createElement('div');status.className ='card-status';status.textContent =isEliminated ? 'ELIMINATED' :'ACTIVE';status.setAttribute('data-id',player.id);const reticle =document.createElement('div');reticle.className ='targeting-reticle';card.appendChild(header);card.appendChild(avatar);card.appendChild(status);card.appendChild(reticle);if (!isEliminated) {card.addEventListener('click',() => {selectPlayer(player.id,player.name);});} playerCardsElement.appendChild(card);});} function updateRoleInfo(role) {const roleNameElement =document.getElementById('role-name');const roleDescriptionElement =document.getElementById('role-description');if (!roleNameElement || !roleDescriptionElement) return;roleNameElement.textContent =role.toUpperCase();roleDescriptionElement.textContent =getRoleDescription(role);} function getRoleDescription(role) {switch (role) {case 'mafia':return 'You are a SEELE infiltrator. Eliminate civilians during the night phase. Pretend to be a civilian during the day phase.';case 'civilian':return 'You are a loyal NERV employee. Use your deduction skills to identify SEELE infiltrators during day discussions.';case 'detective':return 'You are a NERV security officer. During the night phase,you can investigate one player to learn if they are SEELE or NERV.';case 'doctor':return 'You are a NERV medical officer. During the night phase,you can protect one player from elimination.';default:return 'Role description not available.';}} function updateActionButtons(role,phase) {const eliminateBtn =document.getElementById('eliminate-btn');const investigateBtn =document.getElementById('investigate-btn');const protectBtn =document.getElementById('protect-btn');if (!eliminateBtn || !investigateBtn || !protectBtn) return;eliminateBtn.style.display ='none';investigateBtn.style.display ='none';protectBtn.style.display ='none';if (phase ==='night') {switch (role) {case 'mafia':eliminateBtn.style.display ='block';break;case 'detective':investigateBtn.style.display ='block';break;case 'doctor':protectBtn.style.display ='block';break;}} if (phase ==='day') {}} function updateChatMessages(messages) {const chatMessages =document.getElementById('chat-messages');if (!chatMessages) return;chatMessages.innerHTML ='';messages.forEach(message => {addChatMessage(message.senderName || 'SYSTEM',message.content,message.type || '');});chatMessages.scrollTop =chatMessages.scrollHeight;} function addChatMessage(sender,content,type ='') {const chatMessages =document.getElementById('chat-messages');if (!chatMessages) return;const messageDiv =document.createElement('div');messageDiv.className =`chat-message ${type}`;const time =new Date().toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});messageDiv.innerHTML =` <span class="message-sender">${sender}:</span> <span class="message-content">${content}</span> <span class="message-time">${time}</span> `;chatMessages.appendChild(messageDiv);chatMessages.scrollTop =chatMessages.scrollHeight;playSystemSound('message');} function setupGameActionListeners() {const eliminateBtn =document.getElementById('eliminate-btn');const investigateBtn =document.getElementById('investigate-btn');const protectBtn =document.getElementById('protect-btn');if (eliminateBtn) {eliminateBtn.addEventListener('click',() => {const selectedPlayerId =getSelectedPlayerId();if (selectedPlayerId) {submitGameAction('eliminate',selectedPlayerId);} else {showActionError('No target selected');}});} if (investigateBtn) {investigateBtn.addEventListener('click',() => {const selectedPlayerId =getSelectedPlayerId();if (selectedPlayerId) {submitGameAction('investigate',selectedPlayerId);} else {showActionError('No target selected');}});} if (protectBtn) {protectBtn.addEventListener('click',() => {const selectedPlayerId =getSelectedPlayerId();if (selectedPlayerId) {submitGameAction('protect',selectedPlayerId);} else {showActionError('No target selected');}});} setupChatFunctionality();} async function submitGameAction(actionType,targetId) {try {if (!window.EvaFirebase) {throw new Error('Firebase module not loaded');} await window.EvaFirebase.submitAction(actionType,targetId);showActionConfirmation(actionType,targetId);playSystemSound('action');hideActionButtons();} catch (error) {console.error('Error submitting action:',error);showActionError('Failed to submit action:' + error.message);}} function hideActionButtons() {const eliminateBtn =document.getElementById('eliminate-btn');const investigateBtn =document.getElementById('investigate-btn');const protectBtn =document.getElementById('protect-btn');if (eliminateBtn) eliminateBtn.style.display ='none';if (investigateBtn) investigateBtn.style.display ='none';if (protectBtn) protectBtn.style.display ='none';} function setupChatFunctionality() {const minimizeChatBtn =document.getElementById('minimize-chat');const chatPanel =document.getElementById('chat-panel');const sendMessageBtn =document.getElementById('send-message-btn');const chatInput =document.getElementById('chat-input');if (!minimizeChatBtn || !chatPanel || !sendMessageBtn || !chatInput) return;minimizeChatBtn.addEventListener('click',() => {chatPanel.classList.toggle('minimized');minimizeChatBtn.textContent =chatPanel.classList.contains('minimized') ? '+' :'_';});sendMessageBtn.addEventListener('click',() => {sendChatMessage();});chatInput.addEventListener('keypress',(e) => {if (e.key ==='Enter') {sendChatMessage();}});} async function sendChatMessage() {const chatInput =document.getElementById('chat-input');if (!chatInput) return;const message =chatInput.value.trim();if (!message) return;try {if (!window.EvaFirebase) {throw new Error('Firebase module not loaded');} await window.EvaFirebase.sendChatMessage(message);chatInput.value ='';} catch (error) {console.error('Error sending message:',error);showNotification('ERROR','Failed to send message:' + error.message);}} function selectPlayer(playerId,playerName) {document.querySelectorAll('.player-card').forEach(card => {card.classList.remove('selected');});const selectedCard =document.querySelector(`.player-card[data-player-id="${playerId}"]`);if (selectedCard) {selectedCard.classList.add('selected');} const actionMessage =document.getElementById('action-message');if (actionMessage) {actionMessage.textContent =`${playerName} selected for action.`;} playSystemSound('select');} function showActionConfirmation(actionType,targetId) {const playerCard =document.querySelector(`.player-card[data-player-id="${targetId}"]`);const playerName =playerCard?.querySelector('.card-header')?.textContent || 'Unknown';let actionName =actionType.charAt(0).toUpperCase() + actionType.slice(1);showNotification('ACTION CONFIRMED',`${actionName} targeted on ${playerName}.`);const actionMessage =document.getElementById('action-message');if (actionMessage) {actionMessage.textContent =`${actionName} action submitted on ${playerName}.`;}} function showActionError(message) {const actionMessage =document.getElementById('action-message');if (actionMessage) {actionMessage.textContent =message;} showNotification('ACTION ERROR',message);playSystemSound('error');} function showNotification(title,message) {const notificationElement =document.getElementById('game-notification');if (!notificationElement) return;const titleElement =notificationElement.querySelector('.notification-title');const messageElement =notificationElement.querySelector('.notification-message');if (titleElement) titleElement.textContent =title;if (messageElement) messageElement.textContent =message;notificationElement.classList.add('active');playSystemSound('notification');setTimeout(() => {notificationElement.classList.remove('active');},3000);} function getSelectedPlayerId() {const selectedCard =document.querySelector('.player-card.selected');return selectedCard ? selectedCard.getAttribute('data-player-id') :null;} function getRoomSettings() {const roomName =document.getElementById('room-name')?.value || 'Unnamed Operation';const playerCount =document.getElementById('player-count')?.value || '6';const includeDetective =document.getElementById('include-detective')?.checked || false;const includeDoctor =document.getElementById('include-doctor')?.checked || false;const timedRounds =document.getElementById('timed-rounds')?.checked || false;const publicEliminations =document.getElementById('public-eliminations')?.checked || false;return {roomName,playerCount,includeDetective,includeDoctor,timedRounds,publicEliminations};} function saveRoomSession(roomId,joinCode) {const session ={roomId,joinCode,timestamp:Date.now()};localStorage.setItem('evaRoomSession',JSON.stringify(session));} function addEvaVisualEffects() {addScanLineEffect();addTerminalTypingEffect();addDataStreamAnimations();setupRandomGlitches();} function addScanLineEffect() {const container =document.querySelector('.eva-container');if (!container) return;if (!document.querySelector('.scan-lines')) {const scanLines =document.createElement('div');scanLines.className ='scan-lines';scanLines.style.cssText =` position:fixed;top:0;left:0;width:100%;height:100%;background:linear-gradient( to bottom,rgba(0,0,0,0) 50%,rgba(0,0,0,0.1) 50% );background-size:100% 4px;pointer-events:none;z-index:100;opacity:0.3;animation:scanline 10s linear infinite;`;container.appendChild(scanLines);}} function addTerminalTypingEffect() {const textElements =document.querySelectorAll('.eva-text:not(.typed)');textElements.forEach(element => {element.classList.add('typed');const text =element.textContent;element.textContent ='';element.style.borderRight ='2px solid var(--color-text-primary)';let i =0;const typeInterval =setInterval(() => {if (i < text.length) {element.textContent +=text.charAt(i);i++;} else {clearInterval(typeInterval);element.style.borderRight ='none';}},30);});} function addDataStreamAnimations() {const container =document.querySelector('.eva-container');if (!container) return;if (!document.querySelector('.data-stream')) {const dataStream1 =document.createElement('div');dataStream1.className ='data-stream data-stream-1';dataStream1.textContent ='MAGI SYSTEM ONLINE - CASPER:OK - BALTHASAR:OK - MELCHIOR:OK - SYNCHRONIZATION RATE:100% - LCL PRESSURE:NOMINAL';const dataStream2 =document.createElement('div');dataStream2.className ='data-stream data-stream-2';dataStream2.textContent ='01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19:20:21:22:23:24:25:26:27:28:29:30';container.appendChild(dataStream1);container.appendChild(dataStream2);}} function setupRandomGlitches() {setInterval(() => {if (Math.random() < 0.1) {addGlitchEffect();}},10000);} function addGlitchEffect() {const container =document.querySelector('.eva-container');if (!container) return;const glitchOverlay =document.createElement('div');glitchOverlay.className ='glitch-overlay';glitchOverlay.style.cssText =` position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,255,0,0.1);pointer-events:none;z-index:999;animation:glitch 0.3s ease-in-out;`;container.appendChild(glitchOverlay);playSystemSound('glitch');setTimeout(() => {container.removeChild(glitchOverlay);},300);} function playSystemSound(soundType) {console.log(`Playing ${soundType} sound effect`);} if (!document.getElementById('eva-animations')) {const style =document.createElement('style');style.id ='eva-animations';style.textContent =` @keyframes scanline {0% {transform:translateY(0);} 100% {transform:translateY(4px);}} @keyframes glitch {0%,100% {opacity:0;} 20%,80% {opacity:0.8;}} `;document.head.appendChild(style);} window.addEventListener('beforeunload',async (event) => {try {if (window.EvaFirebase && window.EvaFirebase.getCurrentRoomId()) {await window.EvaFirebase.leaveRoom();}} catch (error) {console.error('Error leaving room:',error);}});