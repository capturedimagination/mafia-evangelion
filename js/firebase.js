 import {initializeApp} from 'firebase/app';import {getFirestore,collection,doc,addDoc,getDoc,updateDoc,deleteDoc,query,where,getDocs,onSnapshot,serverTimestamp,arrayUnion,arrayRemove} from 'firebase/firestore';const firebaseConfig ={apiKey:"YOUR_API_KEY",authDomain:"eva-mafia-game.firebaseapp.com",projectId:"eva-mafia-game",storageBucket:"eva-mafia-game.appspot.com",messagingSenderId:"000000000000",appId:"1:000000000000:web:0000000000000000000000"};const app =initializeApp(firebaseConfig);const db =getFirestore(app);const roomsCollection =collection(db,'rooms');let currentRoomId =null;let currentRoomUnsubscribe =null;async function createRoom(roomData) {try {const {getUserId,getUserDisplayName} =await import('./auth.js');const userId =getUserId();if (!userId) {throw new Error('User must be authenticated to create a room');} const joinCode =generateJoinCode();const room ={name:roomData.roomName,createdBy:userId,createdAt:serverTimestamp(),joinCode:joinCode,players:[{id:userId,name:getUserDisplayName() || 'HOST',isHost:true}],settings:{playerCount:parseInt(roomData.playerCount),includeDetective:roomData.includeDetective,includeDoctor:roomData.includeDoctor,timedRounds:roomData.timedRounds,publicEliminations:roomData.publicEliminations},gameState:'waiting'};const roomRef =await addDoc(roomsCollection,room);currentRoomId =roomRef.id;console.log('Room created with ID:',roomRef.id);return {roomId:roomRef.id,joinCode:joinCode};} catch (error) {console.error('Error creating room:',error);throw error;}} async function joinRoom(joinCode,playerName) {try {const {getUserId,getUserDisplayName} =await import('./auth.js');const userId =getUserId();if (!userId) {throw new Error('User must be authenticated to join a room');} const roomQuery =query(roomsCollection,where('joinCode','==',joinCode));const querySnapshot =await getDocs(roomQuery);if (querySnapshot.empty) {throw new Error('Room not found with that join code');} const roomDoc =querySnapshot.docs[0];const roomData =roomDoc.data();if (roomData.players.length >=roomData.settings.playerCount) {throw new Error('Room is full');} if (roomData.gameState !=='waiting') {throw new Error('Game has already started');} const existingPlayer =roomData.players.find(player => player.id ===userId);if (existingPlayer) {throw new Error('You are already in this room');} const roomRef =doc(db,'rooms',roomDoc.id);await updateDoc(roomRef,{players:arrayUnion({id:userId,name:playerName || getUserDisplayName(),isHost:false,joinedAt:serverTimestamp()})});currentRoomId =roomDoc.id;console.log('Joined room:',roomDoc.id);return {roomId:roomDoc.id,roomData:roomData};} catch (error) {console.error('Error joining room:',error);throw error;}} async function leaveRoom() {try {const {getUserId} =await import('./auth.js');const userId =getUserId();if (!userId || !currentRoomId) {console.warn('No user or room to leave');return;} const roomRef =doc(db,'rooms',currentRoomId);const roomSnap =await getDoc(roomRef);if (!roomSnap.exists()) {throw new Error('Room not found');} const roomData =roomSnap.data();const players =roomData.players;const currentPlayer =players.find(player => player.id ===userId);if (!currentPlayer) {throw new Error('Player not found in room');} const updatedPlayers =players.filter(player => player.id !==userId);if (updatedPlayers.length ===0) {await deleteDoc(roomRef);console.log('Room deleted (empty)');} else {if (currentPlayer.isHost) {updatedPlayers[0].isHost =true;} await updateDoc(roomRef,{players:updatedPlayers});await updateDoc(roomRef,{log:arrayUnion({time:serverTimestamp(),type:'system',message:`${currentPlayer.name} has left the room`})});console.log('Left room successfully');} if (currentRoomUnsubscribe) {currentRoomUnsubscribe();currentRoomUnsubscribe =null;} currentRoomId =null;} catch (error) {console.error('Error leaving room:',error);throw error;}} async function startGame() {try {const {getUserId} =await import('./auth.js');const userId =getUserId();if (!userId || !currentRoomId) {throw new Error('No user or room');} const roomRef =doc(db,'rooms',currentRoomId);const roomSnap =await getDoc(roomRef);if (!roomSnap.exists()) {throw new Error('Room not found');} const roomData =roomSnap.data();const currentPlayer =roomData.players.find(player => player.id ===userId);if (!currentPlayer || !currentPlayer.isHost) {throw new Error('Only the host can start the game');} if (roomData.players.length < 5) {throw new Error('Not enough players to start (minimum 5)');} const roles =assignRoles(roomData.players,roomData.settings);await updateDoc(roomRef,{gameState:'playing',roles:roles,currentPhase:'night',phaseStartTime:serverTimestamp(),phaseDuration:120,round:1,log:arrayUnion({time:serverTimestamp(),type:'game',message:'Game started'})});console.log('Game started');return roles;} catch (error) {console.error('Error starting game:',error);throw error;}} function listenToRoom(callback) {if (!currentRoomId) {console.warn('No room to listen to');return () => {};} if (currentRoomUnsubscribe) {currentRoomUnsubscribe();} const roomRef =doc(db,'rooms',currentRoomId);currentRoomUnsubscribe =onSnapshot(roomRef,(doc) => {if (doc.exists()) {const roomData =doc.data();callback(roomData);} else {console.warn('Room no longer exists');currentRoomId =null;callback(null);}},error => {console.error('Error listening to room:',error);});return currentRoomUnsubscribe;} async function submitAction(actionType,targetId) {try {const {getUserId} =await import('./auth.js');const userId =getUserId();if (!userId || !currentRoomId) {throw new Error('No user or room');} const roomRef =doc(db,'rooms',currentRoomId);const roomSnap =await getDoc(roomRef);if (!roomSnap.exists()) {throw new Error('Room not found');} const roomData =roomSnap.data();if (roomData.gameState !=='playing') {throw new Error('Game is not in progress');} const currentPhase =roomData.currentPhase;const currentRole =roomData.roles.find(role => role.playerId ===userId)?.role;if (!isValidAction(actionType,currentRole,currentPhase)) {throw new Error(`Invalid action ${actionType} for role ${currentRole} in phase ${currentPhase}`);} await updateDoc(roomRef,{actions:arrayUnion({type:actionType,playerId:userId,targetId:targetId,timestamp:serverTimestamp()})});console.log('Action submitted:',actionType,targetId);return true;} catch (error) {console.error('Error submitting action:',error);throw error;}} async function sendChatMessage(message,targetId =null) {try {const {getUserId} =await import('./auth.js');const userId =getUserId();if (!userId || !currentRoomId) {throw new Error('No user or room');} const roomRef =doc(db,'rooms',currentRoomId);const roomSnap =await getDoc(roomRef);if (!roomSnap.exists()) {throw new Error('Room not found');} const roomData =roomSnap.data();const currentPlayer =roomData.players.find(player => player.id ===userId);if (!currentPlayer) {throw new Error('Player not found in room');} const chatMessage ={senderId:userId,senderName:currentPlayer.name,content:message,timestamp:serverTimestamp()};if (targetId) {chatMessage.targetId =targetId;} await updateDoc(roomRef,{chat:arrayUnion(chatMessage)});console.log('Message sent:',message);return true;} catch (error) {console.error('Error sending message:',error);throw error;}} function generateJoinCode() {const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let result ='';for (let i =0;i < 6;i++) {result +=characters.charAt(Math.floor(Math.random() * characters.length));} return result;} function assignRoles(players,settings) {const playerCount =players.length;const roles =[];const mafiaCount =Math.max(1,Math.floor(playerCount / 3));const allRoles =[];for (let i =0;i < mafiaCount;i++) {allRoles.push('mafia');} if (settings.includeDetective) {allRoles.push('detective');} if (settings.includeDoctor) {allRoles.push('doctor');} const remainingSlots =playerCount - allRoles.length;for (let i =0;i < remainingSlots;i++) {allRoles.push('civilian');} const shuffledRoles =shuffleArray(allRoles);players.forEach((player,index) => {roles.push({playerId:player.id,playerName:player.name,role:shuffledRoles[index]});});return roles;} function isValidAction(actionType,role,phase) {if (phase ==='night') {switch (actionType) {case 'eliminate':return role ==='mafia';case 'investigate':return role ==='detective';case 'protect':return role ==='doctor';default:return false;}} if (phase ==='day') {switch (actionType) {case 'vote':return true;default:return false;}} return false;} function shuffleArray(array) {const result =[...array];for (let i =result.length - 1;i > 0;i--) {const j =Math.floor(Math.random() * (i + 1));[result[i],result[j]] =[result[j],result[i]];} return result;} function getCurrentRoomId() {return currentRoomId;} function setCurrentRoomId(roomId) {currentRoomId =roomId;} export {app,db,createRoom,joinRoom,leaveRoom,startGame,listenToRoom,submitAction,sendChatMessage,getCurrentRoomId,setCurrentRoomId};