{
  "rules": {
    "rooms": {
      // Only authenticated users can read/write rooms
      ".read": "auth != null",
      ".write": "auth != null",
      
      "$roomId": {
        // Room-specific rules
        ".read": "auth != null",
        
        // Only allow writes if user is in the room or creating a new room
        ".write": "auth != null && (
                    // New room creation
                    !data.exists() ||
                    // User is in the room's player list
                    data.child('players').exists() && data.child('players').hasChild(auth.uid) ||
                    // User is the room creator
                    data.child('createdBy').val() === auth.uid
                  )",
        
        // Validate room structure
        ".validate": "newData.hasChildren(['name', 'createdBy', 'createdAt', 'joinCode', 'players', 'settings', 'gameState'])",
        
        "players": {
          // Validate player count
          ".validate": "newData.isArray() && newData.val().length <= newData.parent().child('settings').child('playerCount').val()",
          
          "$playerIndex": {
            // Validate player structure
            ".validate": "newData.hasChildren(['id', 'name', 'isHost'])",
            
            "id": {
              // Player ID must match auth ID or be a valid user ID
              ".validate": "newData.isString()"
            },
            
            "name": {
              // Name must be a string and not empty
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 20"
            },
            
            "isHost": {
              // isHost must be boolean
              ".validate": "newData.isBoolean()"
            }
          }
        },
        
        "settings": {
          // Validate settings structure
          ".validate": "newData.hasChildren(['playerCount', 'includeDetective', 'includeDoctor', 'timedRounds', 'publicEliminations'])",
          
          "playerCount": {
            // Player count must be between 5 and 10
            ".validate": "newData.isNumber() && newData.val() >= 5 && newData.val() <= 10"
          }
        },
        
        "gameState": {
          // Game state must be one of the allowed values
          ".validate": "newData.isString() && (newData.val() === 'waiting' || newData.val() === 'playing' || newData.val() === 'finished')"
        },
        
        "actions": {
          // Only players in the game can submit actions
          ".validate": "auth != null && root.child('rooms').child($roomId).child('players').exists() && 
                        root.child('rooms').child($roomId).child('players').val().some(function(player) { return player.id === auth.uid; })"
        },
        
        "chat": {
          // Chat messages must have sender ID that matches auth ID
          "$messageId": {
            ".validate": "newData.child('senderId').val() === auth.uid"
          }
        }
      }
    },
    
    "users": {
      // Users can only read/write their own data
      "$userId": {
        ".read": "auth != null && auth.uid === $userId",
        ".write": "auth != null && auth.uid === $userId"
      }
    }
  }
}